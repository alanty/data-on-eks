apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: trino-control-karpenter
  namespace: karpenter
spec:
  template:
    metadata:
      labels:
        NodePool: trino-control-karpenter
        node.kubernetes.io/workload-type: trino-control
        node.kubernetes.io/instance-category: memory
        node.kubernetes.io/arch: arm64

    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: trino-nodeclass

      requirements:
        # Capacity type - on-demand for control nodes
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]

        # Architecture - ARM64 for cost optimization
        - key: kubernetes.io/arch
          operator: In
          values: ["arm64"]

        # Instance categories - memory optimized for Trino
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["r"]

        # Instance families - ARM64 memory families
        - key: karpenter.k8s.aws/instance-family
          operator: In
          values: ["r6g", "r7g", "r8g"]

        # Instance sizes - control nodes need less resources
        - key: karpenter.k8s.aws/instance-size
          operator: In
          values: ["2xlarge", "4xlarge"]

  disruption:
    consolidationPolicy: WhenEmpty
    consolidateAfter: "60s"

  limits:
    cpu: "128"
    memory: "256Gi"

  # Lower weight for control nodes
  weight: 10